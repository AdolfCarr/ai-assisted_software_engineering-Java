# Prompt: Create a Spring Boot Inventory System Project

## Objective
Generate a **ready-to-run Spring Boot application** for a simple store inventory system. The application should allow users to:
1. **View a list of available products**
2. **Add a new product**
3. **Update an existing product**

Each product should have:
- `id` (auto-generated, Long)
- `name` (String, required)
- `description` (String)
- `price` (Double, required)
- `quantity` (Integer, required)

The application must use:
- **Spring Boot** (latest stable version)
- **Spring Data JPA / Hibernate** for ORM
- **MySQL** for database
- **Spring Web** for REST endpoints
- **Lombok** for boilerplate code reduction
- **application.properties** configured for MySQL connection

---

## Requirements

### 1. Project Setup
- **Maven** project structure with proper `pom.xml` including dependencies:
  - `spring-boot-starter-web`
  - `spring-boot-starter-data-jpa`
  - `mysql-connector-j`
  - `lombok`
  - `spring-boot-starter-test` for testing
- Java 17 or latest supported by Spring Boot.


### 2. Entity
- Class `Product` with fields:
- `Long id` (Primary Key, @GeneratedValue)
- `String name` (@Column, not null)
- `String description`
- `Double price` (@Column, not null)
- `Integer quantity` (@Column, not null)
- Use **Lombok annotations** (`@Data`, `@NoArgsConstructor`, `@AllArgsConstructor`).

### 3. Repository
- Interface `ProductRepository` extending `JpaRepository<Product, Long>`.

### 4. Service Layer
- Interface `ProductService` with methods:
- `List<Product> getAllProducts()`
- `Product getProductById(Long id)`
- `Product createProduct(Product product)`
- `Product updateProduct(Long id, Product product)`
- Implementation `ProductServiceImpl` using `@Service`.

### 5. Controller
- `ProductController` class with:
- `GET /products` → returns list of products
- `GET /products/{id}` → returns single product by ID
- `POST /products` → creates a new product
- `PUT /products/{id}` → updates existing product
- Annotated with `@RestController` and `@RequestMapping("/products")`.

### 6. Database Configuration
- **application.properties**:
```properties
spring.datasource.url=jdbc:mysql://localhost:3306/inventorydb
spring.datasource.username=root
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
server.port=8080


7. Testing
Add unit tests for:

ProductService

ProductController (mock repository or service with Mockito)

8. Build & Run Instructions
Commands:

```bash
mvn clean install
mvn spring-boot:run
MySQL Setup:
```

```sql
CREATE DATABASE inventorydb;
9. API Test Examples
GET all products: curl http://localhost:8080/products
```
POST create product:

```bash
curl -X POST http://localhost:8080/products \
-H "Content-Type: application/json" \
-d '{"name":"Laptop","description":"Gaming Laptop","price":1500.0,"quantity":5}'
```

Prompt: create a set of testing cases for each package


